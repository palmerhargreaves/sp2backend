<?php

namespace common\models\activity\sections;

use common\models\activity\fields\blocks\ActivityTargetBlock;
use common\models\activity\fields\blocks\BaseBlockModel;
use common\models\dealers\DealersSearch;

/**
 * Created by PhpStorm.
 * User: kostet
 * Date: 03.09.2018
 * Time: 11:48
 *
 * @property mixed $model
 */
class ActivitySectionTargets extends BaseBlockModel
{
    protected $_block_template = 'partials/blocks/targets/_targets';

    public function beforeSave($insert)
    {
        $this->header = is_null($this->header) ? 'Цели' : $this->header;

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * @return mixed
     */
    public function getModel()
    {
        return new ActivityTargetBlock();
    }

    public function renderFields($view)
    {
        return [
            'html_container' => $this->_fields_container,
            'html' => $view->renderAjax('partials/blocks/targets/_targets_fields_list', ['fields' => $this->getFieldsList(), 'section' => $this])
        ];
    }

    public function addBlockField($view)
    {
        $activity_id = \Yii::$app->request->post('activity_id');

        $model = $this->getModel();
        if ($model->load(\Yii::$app->request->post())) {

            if (ActivityTargetBlock::find()->where(['activity_id' => $activity_id, 'parent_id' => $this->id, 'dealer_id' => $model->dealer_id])->count() > 0) {
                return ['success' => false, 'message' => \Yii::t('app', 'Ошибка добавления нового поля. Для выбранного дилера уже создано поле.')];
            }

            $model->editable = 1;
            $model->parent_id = $this->id;
            $model->activity_id = $activity_id;
            $model->value_type = 'dig';
            $model->show_in_statistic = true;
            $model->status = 1;

            //Добавляем новое поле и получаем список всех полей привязанных к блоку
            if ($model->validate() && $model->save()) {
                return $this->addFieldSuccess($view);
            } else {
                $errors = array();
                foreach($model->errors as $field_id => $errors_items) {
                    foreach ($errors_items as $error) {
                        $errors[] = $error;
                    }
                }
            }
        }

        return ['success' => false, 'message' => \Yii::t('app', 'Ошибка добавления нового поля.</br>' . implode('<br/>', $errors))];
    }
}
