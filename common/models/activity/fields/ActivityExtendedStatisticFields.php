<?php

namespace common\models\activity\fields;

use common\models\activity\ActivityExtendedStatisticFieldsData;
use common\models\activity\fields\traits\ActivityFieldCalcFieldsTrait;
use common\models\activity\fields\traits\ActivityFieldsTrait;
use Yii;

/**
 * This is the model class for table "activity_extended_statistic_fields".
 *
 * @property integer $id
 * @property string $header
 * @property string $value_type
 * @property integer $activity_id
 * @property integer $parent_id
 * @property integer $status
 * @property string $description
 * @property integer $position
 * @property integer $required
 * @property integer $step_id
 */
class ActivityExtendedStatisticFields extends \yii\db\ActiveRecord
{
    const CALC = 'calc';

    const FIELD_TYPE_MONEY = 'money';

    use ActivityFieldsTrait;
    use ActivityFieldCalcFieldsTrait;

    /**
     * @inheritdoc
     */
    public static function tableName ()
    {
        return 'activity_extended_statistic_fields';
    }

    /**
     * @inheritdoc
     */
    public function rules ()
    {
        return [
            [ [ 'header', 'activity_id' ], 'required' ],
            [ [ 'value_type' ], 'string' ],
            [ [ 'activity_id', 'parent_id', 'status', 'position', 'required', 'step_id' ], 'integer' ],
            [ [ 'header', 'description' ], 'string', 'max' => 255 ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels ()
    {
        return [
            'id' => 'ID',
            'header' => 'Название',
            'value_type' => 'Тип поля',
            'activity_id' => 'Активность',
            'parent_id' => 'Parent ID',
            'status' => 'Статус',
            'description' => 'Описание',
            'position' => 'Position',
            'required' => 'Обязательное',
        ];
    }

    public static function getFieldTypesList ()
    {
        return [
            'date' => Yii::t('app', 'Дата'),
            'dig' => Yii::t('app', 'Значение'),
            'calc' => Yii::t('app', 'Вычисляемое поле'),
            'text' => Yii::t('app', 'Текст'),
            'file' => Yii::t('app', 'Файл'),
            'money' => Yii::t('app', 'Деньги'),
        ];
    }

    /**
     * @param $symbol
     * @return mixed
     */
    public static function calcTypeLabel ( $symbol )
    {
        return self::getTypes()[ $symbol ];
    }

    public static function getTypes ()
    {
        return [
            'plus' => '+',
            'minus' => '-',
            'divide' => '/',
            'multiple' => '*',
            'percent' => '%',
        ];
    }

    public function isCalc ()
    {
        return $this->value_type == self::CALC ? true : false;
    }

    public function isCalcField ()
    {
        return ActivityExtendedStatisticFieldsCalculated::find()->where([ 'parent_field' => $this->id ])->count() > 0;
    }

    public function getCalcType ()
    {
        return ActivityExtendedStatisticFieldsCalculated::find()->where([ 'parent_field' => $this->id ])->one()->calc_type;
    }

    public function getCalcFields ()
    {
        return ActivityExtendedStatisticFieldsCalculated::find()->where([ 'parent_field' => $this->id ])->orderBy([ 'id' => SORT_ASC ])->all();
    }

    public function beforeDelete ()
    {
        ActivityExtendedStatisticFieldsCalculated::deleteAll([ 'parent_field' => $this->id ]);

        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    /**
     * @return string
     */
    public function getCalcFieldsList ()
    {
        $result = [];
        $symbol = '';

        $calc_fields = ActivityExtendedStatisticFieldsCalculated::find()->where([ 'parent_field' => $this->id ])->all();
        foreach ($calc_fields as $calc_field) {
            $result[] = $calc_field->getCalcFieldName();

            $symbol = $calc_field->calc_type;
        }

        return implode(' <strong>' . self::calcTypeLabel($symbol) . '</strong> ', $result);
    }

    /**
     * @return array
     */
    public function getCalcFieldsIds ()
    {
        $result = [];

        $calc_fields = ActivityExtendedStatisticFieldsCalculated::find()->where([ 'parent_field' => $this->id ])->all();
        foreach ($calc_fields as $calc_field) {
            $result[] = $calc_field->calc_field;
        }

        return $result;
    }

    /**
     * @param $postData
     * @return array
     */
    public static function saveData ( $postData )
    {
        $field = self::find()->where([ 'id' => $postData[ 'field_id' ] ])->one();
        if (!$field) {
            return [ 'success' => false, 'msg' => Yii::t('app', 'Ошибка при сохранении поля.') ];
        }

        foreach ($postData[ 'data' ] as $ind => $data) {
            $field->{$data[ 'field' ]} = $data[ 'value' ];
        }
        $field->save(false);

        return [ 'success' => true, 'msg' => Yii::t('app', 'Данные успешно сохранены.') ];
    }

    /**
     * @param $postData
     * @return array
     */
    public static function saveCalcFieldsData ( $postData )
    {

        $field = self::find()->where([ 'id' => $postData[ 'field_id' ] ])->one();
        if (!$field) {
            return [ 'success' => false, 'msg' => Yii::t('app', 'Ошибка при сохранении поля.') ];
        }

        ActivityExtendedStatisticFieldsCalculated::deleteAll([ 'parent_field' => $field->id ]);

        foreach ($postData[ "data" ] as $calc_field_item) {
            $new_calc_field = new ActivityExtendedStatisticFieldsCalculated();

            $new_calc_field->parent_field = $field->id;
            $new_calc_field->calc_field = $calc_field_item[ 'id' ];
            $new_calc_field->calc_type = $postData[ 'calc_type' ];
            $new_calc_field->activity_id = $field->activity_id;

            $new_calc_field->save(false);
        }

        return [ 'success' => true, 'msg' => Yii::t('app', 'Данные успешно сохранены.') ];
    }

    public static function makeSortFields ()
    {
        $section_id = Yii::$app->request->post("section");
        $fields = Yii::$app->request->post("fields");

        $position = 1;
        foreach ($fields as $field) {
            $field_item = ActivityExtendedStatisticFields::find()->where([ 'id' => $field, 'parent_id' => $section_id ])->one();
            if ($field_item) {
                $field_item->position = $position;
                $field_item->save(false);

                $position++;
            }
        }

        return [ $position > 1 ? true : false ];
    }
}
