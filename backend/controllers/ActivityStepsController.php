<?php
/**
 * Created by PhpStorm.
 * User: kostet
 * Date: 16.11.2017
 * Time: 13:06
 */

namespace backend\controllers;


use common\models\activity\Activity;
use common\models\activity\steps\ActivityExtendedStatisticSteps;
use common\models\activity\steps\ActivityExtendedStatisticStepsSearch;
use richardfan\sortable\SortableAction;
use Yii;
use yii\filters\AccessControl;
use yii\filters\VerbFilter;
use yii\helpers\Url;

/**
 *
 * @property \yii\db\ActiveRecord|null|array|\yii\web\Response $activity
 */
class ActivityStepsController extends PageController
{
    const PAGE_URL = '/activity-service';
    const PAGE_STEPS_URL = '/activity-steps/config-steps';
    const PAGE_STEP_FIELDS_URL = '/activity-steps/config-step-fields';

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'rules' => [
                    [
                        'actions' => ['login', 'error'],
                        'allow' => true,
                    ],
                    [
                        'actions' => ['logout', 'index', 'config-steps', 'add-step', 'edit-step', 'delete-step', 'config-step-fields'],
                        'allow' => true,
                        'roles' => ['@'],
                    ],
                ],
            ],
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'logout' => ['post'],
                ],
            ],
        ];
    }

    public function actions()
    {
        return [
            'sortItem' => [
                'class' => SortableAction::className(),
                'activeRecordClassName' => ActivityExtendedStatisticSteps::className(),
                'orderColumn' => 'position'
            ]
        ];

        //parent::actions(); // TODO: Change the autogenerated stub
    }

    /**
     * @return string
     */
    public function actionConfigSteps() {
        $this->_page_header = Yii::t('app', $this->getActivity()->name);
        $this->_page_description = Yii::t('app', 'Управление шагами по заполнению статистики');

        $this->_current_page = self::PAGE_STEPS_URL;

        $searchModel = new ActivityExtendedStatisticStepsSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        $this->makeBreadCrumb([
            Url::to([self::PAGE_URL]) => Yii::t('app', 'Параметры статистики'),
            '' => \Yii::t('app', $this->_page_header)
        ]);

        return $this->render('config-steps', ['dataProvider' => $dataProvider, 'searchModel' => $searchModel, 'activity_id' => Yii::$app->request->get('id') ]);
    }

    /**
     * @return string|\yii\web\Response
     */
    public function actionAddStep() {
        $this->_page_header = Yii::t('app', 'Новый шаг');
        $this->_page_description = Yii::t('app', 'Добавление нового шага в активность');

        $this->makeBreadCrumb([
            Url::to([self::PAGE_URL]) => Yii::t('app', 'Параметры статистики'),
            Url::to([self::PAGE_STEPS_URL, 'id' => Yii::$app->request->get('id')]) => $this->getActivity()->name,
            '' => \Yii::t('app', $this->_page_header)
        ]);

        $steps_model = new ActivityExtendedStatisticSteps();
        if ($steps_model->load(Yii::$app->request->post()) && $steps_model->save()) {
            Yii::$app->session->setFlash('success', Yii::t('app', 'Шаг успешно добавлен'));

            return $this->redirect(Url::to([self::PAGE_STEPS_URL, 'id' => $steps_model->activity_id]));
        }

        return $this->render('add-step', ['model' => $steps_model, 'activity_id' => Yii::$app->request->get('id') ]);
    }

    /**
     * @return string|\yii\web\Response
     */
    public function actionEditStep() {
        $this->_page_header = Yii::t('app', 'Редактирование шага');
        $this->_page_description = Yii::t('app', 'Реадактирование шага привязанного к активности');

        $this->makeBreadCrumb([
            Url::to([self::PAGE_URL]) => Yii::t('app', 'Параметры статистики'),
            '' => \Yii::t('app', $this->_page_header)
        ]);

        $steps_model = ActivityExtendedStatisticSteps::find()->where(['id' => Yii::$app->request->get('id')])->one();
        if ($steps_model->load(Yii::$app->request->post()) && $steps_model->save()) {
            Yii::$app->session->setFlash('success', Yii::t('app', 'Шаг успешно обновлен'));

            return $this->redirect(Url::to([self::PAGE_STEPS_URL, 'id' => $steps_model->activity_id]));
        }

        return $this->render('edit-step', ['model' => $steps_model]);
    }

    /**
     * @return \yii\web\Response
     */
    public function actionDeleteStep() {
        $model = ActivityExtendedStatisticSteps::find()->where(['id' => Yii::$app->request->get('id')])->one();
        if ($model) {
            ActivityExtendedStatisticSteps::deleteAll(['id' => Yii::$app->request->get('id')]);

            Yii::$app->session->setFlash('success', 'Шаг успешно удален.');
        }

        return $this->redirect(Url::to([self::PAGE_STEPS_URL, 'id' => $model->activity_id]));
    }

    /**
     * @return string
     */
    public function actionConfigStepFields() {
        $this->_page_header = Yii::t('app', 'Поля');
        $this->_page_description = Yii::t('app', 'Управление привязкой полей к шагам по статистике');

        $this->_current_page = self::PAGE_STEP_FIELDS_URL;

        $this->makeBreadCrumb([
            Url::to([self::PAGE_URL]) => Yii::t('app', 'Параметры статистики'),
            '' => \Yii::t('app', $this->_page_header)
        ]);


        return $this->render('config-step-fields');
    }
}
